<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fire&#39;s Blog</title>
  
  <subtitle>念念不忘，必有回响</subtitle>
  <link href="https://i-fire.top/atom.xml" rel="self"/>
  
  <link href="https://i-fire.top/"/>
  <updated>2021-01-17T03:16:11.091Z</updated>
  <id>https://i-fire.top/</id>
  
  <author>
    <name>烟火小兽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我爱签到网使用教程</title>
    <link href="https://i-fire.top/post/52sign.html"/>
    <id>https://i-fire.top/post/52sign.html</id>
    <published>2021-01-17T02:43:30.000Z</published>
    <updated>2021-01-17T03:16:11.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我爱签到网使用教程"><a href="#我爱签到网使用教程" class="headerlink" title="我爱签到网使用教程"></a>我爱签到网使用教程</h1><h3 id="平台介绍"><a href="#平台介绍" class="headerlink" title="平台介绍"></a>平台介绍</h3><p>一个集成了各大平台打卡签到功能的系统，基于springboot和layui开发，大部分功能完全免费</p><h3 id="目前已经有的功能"><a href="#目前已经有的功能" class="headerlink" title="目前已经有的功能"></a>目前已经有的功能</h3><ul><li>学习通签到<ul><li>普通签到</li><li>位置签到</li><li>手势签到</li></ul></li><li>网易云打卡<ul><li>云贝打卡</li><li>每日听歌300首</li></ul></li></ul><p><strong>PS：只要保持各大平台的密码正确，完全可以实现自动化签到，彻底解放双手</strong></p><p><strong>PS：后续会添加更多自动化功能</strong></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li><p>打卡我爱签到网网址：<a href="https://52sign.top/">https://52sign.top/</a></p></li><li><p>点击注册用户，点击这两处都行</p><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117100006.png"></p></li><li><p>按照要求输入相应的信息即可，然后点击注册</p><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117100213.png"></p></li><li><p>注册成功后会收到一封激活邮箱的邮件，只有先激活邮箱，才能登陆网站</p></li><li><p>然后登陆到网站里面，看到当前页面说明注册成功</p><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117102141.png"></p></li><li><p>登陆成功后即可开始使用（以学习通签到为例）</p><ul><li><p>首先需要添加一个学习通账号</p><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117102605.png"></p></li></ul></li><li><p>添加完毕后获取学习通账户的所有课程</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117102839.png"></p><p>选择刚才添加的学习通账号，然后获取到账号中的所有的课程后</p><ul><li><p>为课程添加签到任务</p><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117103156.png"></p></li><li><p>查看签到所有的签到任务</p><p><img src="C:\Users\15061\AppData\Roaming\Typora\typora-user-images\image-20210117103344648.png"></p></li><li><p>查看学习通签到日志</p><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20210117103415.png"></p></li></ul><p><strong>注意：数据库中的数据没10分钟才会同步一次，有时候日志里面没有数据不代表没签上，具体以学习通是否签到为准</strong></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>至此演示了学习通签到任务的添加流程，网易云也是大同小异，请自己研究一下！！</p>]]></content>
    
    
    <summary type="html">全自动打卡，彻底解放你的双手，让您专注于手头的任务上</summary>
    
    
    
    <category term="项目" scheme="https://i-fire.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="个人项目" scheme="https://i-fire.top/tags/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="我爱签到网" scheme="https://i-fire.top/tags/%E6%88%91%E7%88%B1%E7%AD%BE%E5%88%B0%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>警醒</title>
    <link href="https://i-fire.top/post/warn.html"/>
    <id>https://i-fire.top/post/warn.html</id>
    <published>2021-01-15T00:47:12.000Z</published>
    <updated>2021-01-15T00:55:18.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="警戒"><a href="#警戒" class="headerlink" title="警戒"></a>警戒</h1><p>今天是2021年1月15号，谨以此文章记录一年前的今天我在某重大战役中的胜利</p><p><strong>凡事必须三思而后行</strong></p>]]></content>
    
    
    <summary type="html">警戒</summary>
    
    
    
    <category term="大事记" scheme="https://i-fire.top/categories/%E5%A4%A7%E4%BA%8B%E8%AE%B0/"/>
    
    
    <category term="生活" scheme="https://i-fire.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>选择排序 SelectSort</title>
    <link href="https://i-fire.top/post/xuanze.html"/>
    <id>https://i-fire.top/post/xuanze.html</id>
    <published>2020-12-26T10:46:22.000Z</published>
    <updated>2020-12-26T10:51:22.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>从头到尾扫描序列，找出最小的一个元素，和第一个元素交换，接着从剩下来的元素中继续这种选择和交换方式，最终得到一个有序序列</p><h3 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h3><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20201226182244.gif" alt="选择排序动画演示"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortOne</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> length,<span class="keyword">int</span> *arr)</span></span>;<span class="comment">//嵌套for循环进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortTwo</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> length,<span class="keyword">int</span> *arr)</span></span>;<span class="comment">//一个递归加上一个for循环进行排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">15</span>]= &#123;<span class="number">12</span>,<span class="number">3123</span>,<span class="number">434</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">65</span>,<span class="number">12</span>,<span class="number">78</span>,<span class="number">87</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6799</span>,<span class="number">89</span>,<span class="number">20</span>,<span class="number">12</span>&#125;; <span class="comment">//定义需要排序的数组</span></span><br><span class="line">sortTwo(<span class="number">15</span>,&amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortOne</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> length,<span class="keyword">int</span> *arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(length&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//数组长度小于2，不需要排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iminpos=<span class="number">0</span>;<span class="comment">//记录每趟循环中最小值的下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">iminpos = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> jj = i+<span class="number">1</span>; jj&lt;length; jj++) &#123;<span class="comment">//下标从jj开始的元素中的最小值，将最小值的下标赋值给 iminpos</span></span><br><span class="line"><span class="keyword">if</span>(arr[jj]&lt;arr[iminpos]) &#123;</span><br><span class="line">iminpos=jj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(iminpos!=i) &#123;<span class="comment">//对找出来的最小值  arr[iminpos]和 arr[i]交换顺序 </span></span><br><span class="line"><span class="keyword">int</span> temp = arr[iminpos];</span><br><span class="line">arr[iminpos] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortTwo</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> length,<span class="keyword">int</span> *arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(length&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//数组长度小于2，不需要排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iminpos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> jj =<span class="number">1</span>; jj&lt;length; jj++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[jj]&lt;arr[iminpos]) &#123;<span class="comment">//下标从jj开始的元素中的最小值，将最小值的下标赋值给 iminpos</span></span><br><span class="line">iminpos=jj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(iminpos!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[iminpos];<span class="comment">//将找到的最小值放入传入的数组的第一个位置，由于每一次的递归都会将数组的指针向后移动一个，所以arr[0]的位置是在不停的不变化 </span></span><br><span class="line">arr[iminpos]=temp;</span><br><span class="line">&#125;</span><br><span class="line">sortTwo(--length,arr+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">选择排序，算法</summary>
    
    
    
    <category term="算法" scheme="https://i-fire.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序算法" scheme="https://i-fire.top/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="选择排序" scheme="https://i-fire.top/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序 BubbleSort</title>
    <link href="https://i-fire.top/post/maopao.html"/>
    <id>https://i-fire.top/post/maopao.html</id>
    <published>2020-11-20T08:28:37.000Z</published>
    <updated>2020-11-20T08:32:42.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在排序的的过程中，会依次的对相邻的两个元素进行比较，如果左边的元素大于右边的元素，那么就会将这两个元素进行交换，类似气泡一样左右浮动</p><h3 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h3><p><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20201120153054.gif" alt="冒泡排序图示"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>通过上面的图示，我们可以看到每次移动元素都是从左边第一个依次的向后进行比较，这样我们就以通过一个for循环实现，此外，每次走遍一整个的比较循环，会将当前需要排序的数组中的最大值排在按序排在数组的尾部，所以我们还需要一个for循环来控制有多少个找出数组剩余元素最大值的循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortOne</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;<span class="comment">//使用两个for循环实现冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">15</span>]= &#123;<span class="number">12</span>,<span class="number">3123</span>,<span class="number">434</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">65</span>,<span class="number">12</span>,<span class="number">78</span>,<span class="number">87</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6799</span>,<span class="number">89</span>,<span class="number">20</span>,<span class="number">12</span>&#125;; <span class="comment">//定义需要排序的数组</span></span><br><span class="line">sortOne(&amp;arr[<span class="number">0</span>],<span class="number">15</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;<span class="comment">//对排序后的数组进行输出，看看是否真的排序成功</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序后的第%d个元素是%d\n&quot;</span>,(i+<span class="number">1</span>),arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortOne</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//元素小于两个的数组不需要排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=count<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;<span class="comment">//控制内层找出数组剩余元素最大值的循环的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;<span class="comment">//每次都会将数组的长度减一，因为一个找出数组剩余元素最大值的循环就会找出当前数组中的最大值，并按序放置在数组的尾部，每次需要比较的都是剩下来的没有比较的数组</span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123; <span class="comment">//如果后一个的值小于前一个值，那么就交换顺序</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过两个for循环的方法，还可以衍生出一个for循环+一个递归实现冒泡排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortTwo</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;<span class="comment">//使用一个for循环和一个递归实现冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">15</span>]= &#123;<span class="number">12</span>,<span class="number">3123</span>,<span class="number">434</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">65</span>,<span class="number">12</span>,<span class="number">78</span>,<span class="number">87</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6799</span>,<span class="number">89</span>,<span class="number">20</span>,<span class="number">12</span>&#125;; <span class="comment">//定义需要排序的数组</span></span><br><span class="line">sortTwo(&amp;arr[<span class="number">0</span>],<span class="number">15</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) &#123;<span class="comment">//对排序后的数组进行输出，看看是否真的排序成功</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序后的第%d个元素是%d\n&quot;</span>,(i+<span class="number">1</span>),arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortTwo</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//元素小于两个的数组不需要排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123;<span class="comment">//如果后一个的值小于前一个值，那么就交换顺序</span></span><br><span class="line"><span class="keyword">int</span> temp=arr[i];</span><br><span class="line">arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">arr[i+<span class="number">1</span>]=temp; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortTwo(arr,--count);<span class="comment">//将原来控制找出数组剩余元素最大值的循环次数的外层for循环替换成了递归调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>上述的两种实现方式都存在一个问题，就是在排序的过程中需要排序的数组就已经因为原数组元素的顺序问题已经达到从小到大的排序的目的，但是循环还没有停止，这样就会造成不必要的内存开销，那么我们可以对上述的两种方式进行优化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortOne</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;<span class="comment">//使用两个for循环实现冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortTwo</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count,<span class="keyword">int</span> n)</span></span>;<span class="comment">//使用一个for循环和一个递归实现冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">9</span>]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">71</span>,<span class="number">8</span>,<span class="number">9</span>&#125;; <span class="comment">//定义需要排序的数组</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;<span class="comment">//用来记录循环的次数</span></span><br><span class="line">sortOne(&amp;arr[<span class="number">0</span>],<span class="number">9</span>);</span><br><span class="line">sortTwo(&amp;arr[<span class="number">0</span>],<span class="number">9</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序后的第%d个元素是%d\n&quot;</span>,(i+<span class="number">1</span>),arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortOne</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(count&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//元素小于两个的数组不需要排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;<span class="comment">//用来记录循环的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=count<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">int</span> isSwap=<span class="number">0</span>;<span class="comment">//用来记录内层循环是否发生了元素之间的交换，0：没有发生交换，1：发生了交换</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123; <span class="comment">//如果后一个的值小于前一个值，那么就交换顺序</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">isSwap=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isSwap==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;循环了%d次\n&quot;</span>,n);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//如果没有发生元素的交换，那么说明排序已经完成，那么接下来直接结束循环就可以了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;循环了%d次\n&quot;</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortTwo</span><span class="params">(<span class="keyword">int</span>* arr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> isSwap=<span class="number">0</span>;<span class="comment">//用来记录内层循环是否发生了元素之间的交换，0：没有发生交换，1：发生了交换</span></span><br><span class="line"><span class="keyword">if</span>(count&lt;<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//元素小于两个的数组不需要排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count<span class="number">-1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[i];</span><br><span class="line">arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">arr[i+<span class="number">1</span>]=temp;</span><br><span class="line">isSwap=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isSwap==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;循环了%d次\n&quot;</span>,n);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//如果没有发生元素的交换，那么说明排序已经完成，那么接下来直接结束循环就可以了</span></span><br><span class="line">&#125;</span><br><span class="line">sortTwo(arr,--count,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用一个变量来记录在排序还没有停止，但是实际上已经将数组排序完毕的情况，这样可以大大的较少不必要的开销</p>]]></content>
    
    
    <summary type="html">冒泡排序，算法</summary>
    
    
    
    <category term="算法" scheme="https://i-fire.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序算法" scheme="https://i-fire.top/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="冒泡排序" scheme="https://i-fire.top/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>单向链表 OneWayLinkedList</title>
    <link href="https://i-fire.top/post/OneWayLinkedList.html"/>
    <id>https://i-fire.top/post/OneWayLinkedList.html</id>
    <published>2020-11-17T12:05:52.000Z</published>
    <updated>2020-11-17T12:19:51.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单向链表（1）"><a href="#单向链表（1）" class="headerlink" title="单向链表（1）"></a>单向链表（1）</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>单向链表是一种线性结构，属于链表的一种，其特点是链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始。链表是使用指针进行构造的列表，并且是由一个个结点组装起来的，因此又称为结点列表。其中每个结点都有指针成员变量指向列表中的下一个结点，head指针指向第一个结点称为表头，而终止于最后一个指向nuLL的指针。</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><img src="https://cdn.jsdelivr.net/gh/i-fire/blog-pic@main/usr/20201117193328.png" alt="单向链表" style="zoom: 50%;" /><h3 id="节点："><a href="#节点：" class="headerlink" title="节点："></a>节点：</h3><p>定义：链表中的最小单元，由两个部分组成</p><ul><li><p>数据部分：保存的是数据</p></li><li><p>指针部分：保存的是当前节点的下一个节点的地址</p></li></ul><h3 id="单向的含义"><a href="#单向的含义" class="headerlink" title="单向的含义"></a>单向的含义</h3><p>所谓单向，指的就是每一个节点中保存的指针地存放的是下一个节点的地址，通过当前节点，只能找到它后面的节点，前面的节点再也无法找回，保存下一个节点的指针变量又被称为<strong>后继</strong></p><h3 id="有空头和无空头链表"><a href="#有空头和无空头链表" class="headerlink" title="有空头和无空头链表"></a>有空头和无空头链表</h3><ul><li>有空头单向链表：指的就是链表中的第一个节点中数据部分为空（不保存数据），指针部分存放的是单向链表中的实际的头元素，也就是第一个保存数据的节点</li><li>无空头单向链表：指的就是链表中的第一个节点就是单向链表的实际的头元素，里面存放有和下一个节点的地址</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>void AddToEnd(struct Node** Head,struct Node** End,int Value);//向链表的尾部添加节点</li><li>void AddToEndNoEnd(struct Node** Head,int Value);//只有头指针，没有尾指针，向链表的尾部添加节点</li><li>void FreeList(struct Node** Head,struct Node** End);//释放整个链表</li><li>void Out(struct Node* Head);//遍历链表</li><li>void AddToHead(struct Node** Head,struct Node** End,int Value);//向链表的头添加一个元素</li><li>struct Node * FindNodeByIndex(struct Node *Head,int Index);//根据下标查找节点，返回节点的地址，下标从0开始</li><li>void InsertByIndex(struct Node** Head,struct Node** End,int Value,int Index);//根据下标插入数据，下标从0开始</li><li>void InsertSomeNdde(struct Node** Head,struct Node** End,int Value,int Num);//一次性添加多个节点</li><li>void ChangeDataByIndex(struct Node* Head,int NewData,int Index);//根据下标，修改数据 ，标从0开始</li><li>void DeleteHead(struct Node** Head,struct Node** End);//删除链表的头</li><li>void DeleteEnd(struct Node** Head,struct Node** End);//删除链表的尾 </li><li>void DeleteDataByData(struct Node** Head,struct Node** End,int Data);//删除对应数据的第一个节点 </li><li>void DeleteDataByIndex(struct Node** Head,struct Node** End,int Index);//根据下标删除节点 下标从0开始 </li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">Next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddToEnd</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value)</span></span>;<span class="comment">//向链表的尾部添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddToEndNoEnd</span><span class="params">(struct Node** Head,<span class="keyword">int</span> Value)</span></span>;<span class="comment">//只有头指针，没有尾指针，向链表的尾部添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeList</span><span class="params">(struct Node** Head,struct Node** End)</span></span>;<span class="comment">//释放整个链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(struct Node* Head)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddToHead</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value)</span></span>;<span class="comment">//向链表的头添加一个元素</span></span><br><span class="line"><span class="function">struct Node * <span class="title">FindNodeByIndex</span><span class="params">(struct Node *Head,<span class="keyword">int</span> Index)</span></span>;<span class="comment">//根据下标查找节点，返回节点的地址，下标从0开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertByIndex</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value,<span class="keyword">int</span> Index)</span></span>;<span class="comment">//根据下标插入数据，下标从0开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSomeNdde</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value,<span class="keyword">int</span> Num)</span></span>;<span class="comment">//一次性添加多个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeDataByIndex</span><span class="params">(struct Node* Head,<span class="keyword">int</span> NewData,<span class="keyword">int</span> Index)</span></span>;<span class="comment">//根据下标，修改数据 ，标从0开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteHead</span><span class="params">(struct Node** Head,struct Node** End)</span></span>;<span class="comment">//删除链表的头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteEnd</span><span class="params">(struct Node** Head,struct Node** End)</span></span>;<span class="comment">//删除链表的尾 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDataByData</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Data)</span></span>;<span class="comment">//删除对应数据的第一个节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDataByIndex</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Index)</span></span>;<span class="comment">//根据下标删除节点 下标从0开始 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">Head</span> =</span><span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">End</span>=</span><span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//一次性添加多个节点 开始</span></span><br><span class="line">InsertSomeNdde(&amp;Head,&amp;End,<span class="number">272</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//一次性添加多个节点 结束 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据下标删除数据 开始</span></span><br><span class="line">DeleteDataByIndex(&amp;Head,&amp;End,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//根据下标删除数据 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表头删除 开始</span></span><br><span class="line">DeleteHead(&amp;Head,&amp;End);</span><br><span class="line">DeleteHead(&amp;Head,&amp;End);</span><br><span class="line"><span class="comment">//链表头删除 结束</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//删删除对应数据的第一个节点  开始</span></span><br><span class="line"> DeleteDataByData(&amp;Head,&amp;End,<span class="number">272</span>);</span><br><span class="line"><span class="comment">//删除对应数据的第一个节点 结束</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//根据下标修改数据 开始</span></span><br><span class="line">ChangeDataByIndex(Head,<span class="number">113</span>,<span class="number">1110</span>);</span><br><span class="line"><span class="comment">//根据下标修改数据 结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表尾添加 开始</span></span><br><span class="line">AddToHead(&amp;Head,&amp;End,<span class="number">1</span>);</span><br><span class="line">AddToEnd(&amp;Head,&amp;End,<span class="number">2</span>);</span><br><span class="line">AddToEnd(&amp;Head,&amp;End,<span class="number">22</span>);</span><br><span class="line">AddToEnd(&amp;Head,&amp;End,<span class="number">222</span>);</span><br><span class="line"><span class="comment">//链表尾添加 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据下标添加数据 开始</span></span><br><span class="line">InsertByIndex(&amp;Head,&amp;End,<span class="number">1111</span>,<span class="number">0</span>); <span class="comment">//头添加</span></span><br><span class="line">InsertByIndex(&amp;Head,&amp;End,<span class="number">11</span>,<span class="number">1</span>); <span class="comment">//中间添加</span></span><br><span class="line">InsertByIndex(&amp;Head,&amp;End,<span class="number">11</span>,<span class="number">11</span>); <span class="comment">//中间添加，但是下标越界</span></span><br><span class="line"><span class="comment">//根据下标添加数据 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表尾删除 开始</span></span><br><span class="line">DeleteEnd(&amp;Head,&amp;End);</span><br><span class="line"><span class="comment">//链表尾删除 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表 开始</span></span><br><span class="line">Out(Head);</span><br><span class="line"><span class="comment">//遍历链表 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据下标查找元素 开始</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">CurrentNode</span>=</span>(FindNodeByIndex(Head,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(CurrentNode!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下标为%d的节点中的存储的值为%d&quot;</span>,<span class="number">1</span>,CurrentNode-&gt;Data);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有查找到这个节点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据下标查找元素 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表 开始</span></span><br><span class="line">FreeList(&amp;Head,&amp;End);</span><br><span class="line"><span class="comment">//释放链表 结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddToEnd</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span>=</span>(struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//对节点进行赋值</span></span><br><span class="line">p-&gt;Data=Value;</span><br><span class="line">p-&gt;Next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>||(*End)==<span class="literal">NULL</span>) &#123; <span class="comment">//说明是一个空链表，里面没有任何的数据</span></span><br><span class="line">*Head=p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">(*End)-&gt;Next=p;</span><br><span class="line">&#125;</span><br><span class="line">(*End)=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddToEndNoEnd</span><span class="params">(struct Node** Head,<span class="keyword">int</span> Value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span>=</span>(struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//对节点进行赋值</span></span><br><span class="line">p-&gt;Data=Value;</span><br><span class="line">p-&gt;Next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>) &#123;</span><br><span class="line">*Head=p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">struct Node *Temp=*Head;</span><br><span class="line"><span class="keyword">while</span>(Temp-&gt;Next!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">Temp=Temp-&gt;Next;</span><br><span class="line">Temp-&gt;Next=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeList</span><span class="params">(struct Node** Head,struct Node** End)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">Temp</span>=</span><span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>((*Head)!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">Temp = (*Head);</span><br><span class="line">(*Head)=(*Head)-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(Temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将头尾指针全部重置为NULL</span></span><br><span class="line">(*Head)=<span class="literal">NULL</span>;</span><br><span class="line">(*End)=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(struct Node *Head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(Head!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;链表的数据是===================================&gt;%d\n&quot;</span>,Head-&gt;Data);</span><br><span class="line">Head=(Head-&gt;Next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddToHead</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span>=</span>(struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">p-&gt;Data=Value;</span><br><span class="line">p-&gt;Next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>||(*End)==<span class="literal">NULL</span>) &#123;</span><br><span class="line">(*Head)=p;</span><br><span class="line">(*End)=p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;Next=(*Head);</span><br><span class="line">(*Head)=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Node* <span class="title">FindNodeByIndex</span><span class="params">(struct Node *Head,<span class="keyword">int</span> Index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Head==<span class="literal">NULL</span>||Index&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！！！！！！！！！！\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(Head!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==Index) &#123;</span><br><span class="line"><span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">Head=(Head-&gt;Next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertByIndex</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value,<span class="keyword">int</span> Index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Index&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下标输入错误，重新输入\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(Index==<span class="number">0</span>) &#123; <span class="comment">//如果下标是0，那么就是头添加</span></span><br><span class="line">AddToHead(Head,End,Value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">struct Node* CurrentNode = FindNodeByIndex(*Head,Index<span class="number">-1</span>);<span class="comment">//找到Index下标的前一个节点，才能将需要添加的元素连接到链表上</span></span><br><span class="line"><span class="keyword">if</span>(CurrentNode!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">Temp</span>=</span>(struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">Temp-&gt;Data=Value;</span><br><span class="line">Temp-&gt;Next= CurrentNode-&gt;Next;<span class="comment">//CurrentNode-&gt;Next这个代表的才是下标为Index的节点</span></span><br><span class="line">CurrentNode-&gt;Next=Temp;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//处理传递的数组下标越界问题</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;传递的的数组下标过大\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSomeNdde</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Value,<span class="keyword">int</span> Num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Num; i++) &#123;</span><br><span class="line">AddToEnd(Head,End,Value);<span class="comment">//直接调用尾添加，将数据全部添加到尾部</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeDataByIndex</span><span class="params">(struct Node* Head,<span class="keyword">int</span> NewData,<span class="keyword">int</span> Index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Head!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">Temp</span>=</span>FindNodeByIndex(Head,Index);<span class="comment">//将对应下标的节点查出来</span></span><br><span class="line"><span class="keyword">if</span>(Temp!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">Temp-&gt;Data=NewData;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找不到这个节点\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;传递的参数错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteHead</span><span class="params">(struct Node** Head,struct Node** End)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((*Head)-&gt;Next==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(*Head);</span><br><span class="line">(*Head)=<span class="literal">NULL</span>;</span><br><span class="line">(*End)=<span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">struct Node* Temp =*Head;</span><br><span class="line">(*Head)=(*Head)-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(Temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteEnd</span><span class="params">(struct Node** Head,struct Node** End)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((*Head)-&gt;Next==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(*Head);</span><br><span class="line">(*Head)=<span class="literal">NULL</span>;</span><br><span class="line">(*End)=<span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">struct Node* Temp=*Head;</span><br><span class="line"><span class="comment">//循环查找到尾节点的前一个节点 </span></span><br><span class="line"><span class="keyword">while</span>(Temp-&gt;Next-&gt;Next!=<span class="literal">NULL</span>)&#123;<span class="comment">//当前节点的下一个节点的下一个节点，不为空才行 </span></span><br><span class="line">Temp=Temp-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==========================%d\n&quot;</span>,Temp-&gt;Data);</span><br><span class="line"><span class="built_in">free</span>(Temp-&gt;Next);</span><br><span class="line">Temp-&gt;Next=<span class="literal">NULL</span>;</span><br><span class="line">(*End)=Temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDataByData</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Data)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>||(*End)==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数不合法\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((*Head)-&gt;Data==Data)&#123;<span class="comment">//判断是不是头删除，是头删除就调用头删除的方法</span></span><br><span class="line"> DeleteHead(Head,End);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((*Head)-&gt;Data==Data)&#123;<span class="comment">//判断是不是尾删除，是头删除就调用尾删除的方法</span></span><br><span class="line"> DeleteEnd(Head,End);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是其他的节点，就遍历节点，然后删除 </span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">Temp</span> =</span>*Head; </span><br><span class="line"> <span class="keyword">while</span>(Temp-&gt;Next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"> <span class="keyword">if</span>(Temp-&gt;Next-&gt;Data==Data)&#123;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Temp=Temp-&gt;Next;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(Temp-&gt;Next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">currentNode</span> =</span> Temp-&gt;Next;</span><br><span class="line"> Temp-&gt;Next=currentNode-&gt;Next;</span><br><span class="line"> <span class="built_in">free</span>(currentNode);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;没有这个节点\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteDataByIndex</span><span class="params">(struct Node** Head,struct Node** End,<span class="keyword">int</span> Index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((*Head)==<span class="literal">NULL</span>||Index&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数不合法\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Index==<span class="number">0</span>)&#123;<span class="comment">//直接调用头删除 </span></span><br><span class="line">DeleteHead(Head,End);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">struct Node* Temp =FindNodeByIndex(*Head,Index<span class="number">-1</span>);<span class="comment">//先将需要删除的节点的前一个节点查找出来</span></span><br><span class="line"><span class="keyword">if</span>(Temp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">Node</span> =</span> Temp-&gt;Next;</span><br><span class="line">Temp-&gt;Next=Node-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(Node);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个节点\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>为什么采用头尾指针</p><p>网上的很多做法对单向链表的操作都是采用一个头指针的情况，我们这里采用的头尾指针一起使用，在不影响单向链表的逻辑的情况下，增强了一些方法的效率：例如链表的尾添加，如果只有头指针的话，那么每一次向单向链表的尾部添加一个节点，我们都需要从头遍历这个单向链表，但是如果知道单向链表的尾指针，那么向尾部添加元素只要修改一个原尾指针中Next的指向即可，效率高</p></li><li><p>为什么尾指针Next变量一定要赋值为NULL</p><p>链表的很多操作都需要通过遍历才能实现，在遍历的过程中让循环结束的添加很多都是判断尾指针节点的Next变量是不是NULL（例如输出整个链表，释放整个链表等等），所以我们必须要将尾指针Next变量赋值为NULL</p></li></ul><h3 id="单向链表的优缺点"><a href="#单向链表的优缺点" class="headerlink" title="单向链表的优缺点"></a>单向链表的优缺点</h3><ul><li><p>优点</p><ul><li>插入数据效率高</li><li>不存在表满的情况，容量充足，同时可以充分地利用空间（每次插入新的数据都是申请一个节点的空间）</li></ul></li><li><p>缺点</p><ul><li>读写慢：每次查找数据都要从头遍历节点，造成效率很低</li></ul></li></ul>]]></content>
    
    
    <summary type="html">数据结构,单向链表,Fire&#39;s Blog,烟火小兽</summary>
    
    
    
    <category term="数据结构" scheme="https://i-fire.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="单向链表" scheme="https://i-fire.top/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
    <category term="数据结构" scheme="https://i-fire.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>DynamicArray 动态数组</title>
    <link href="https://i-fire.top/post/dynamicarray.html"/>
    <id>https://i-fire.top/post/dynamicarray.html</id>
    <published>2020-11-14T11:03:09.000Z</published>
    <updated>2020-11-15T07:59:55.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h1><p>在c语言中我们都听过数组，创建一个数组也很简单，例如我们创建一个简单的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">2</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">//这样我们就创建好了一个数组，并且对其进行初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的数组创建好后，数组的大小就会被固定下来，当我们想要添加第三个元素的时候，那么就无法添加成功，怎么解决？？？</p><p>我们可以使用动态数组这样的线性结构来解决数组不能够增大容量的问题</p><h2 id="动态数组-1"><a href="#动态数组-1" class="headerlink" title="动态数组"></a>动态数组</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>动态数组，顾名思义就是能够动态的添加元素（从堆内存动态的分配存储空间），不会存在容量满了这一说法，只要我想添加元素，那么就可以添加元素</p><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p>动态数组的实现我们可以依托c语言提供的普通数组实现，定义一个结构体变量，结构体变量中有三个元素</p><ul><li><p>int * P：用来保存一个数组，数组中存储的是用户自定义的数据</p></li><li><p>unsigned int Container：数组的容量</p></li><li><p>unsigned int I：数组已经存储元素的数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicArray</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> * P;<span class="comment">//数组的头指针</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Container;<span class="comment">//数组的容量</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> I;<span class="comment">//数组已经存储元素的数量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态数组常用的方法"><a href="#动态数组常用的方法" class="headerlink" title="动态数组常用的方法"></a>动态数组常用的方法</h3><ul><li>void init(struct DynamicArray* Address)：初始化函数，对创建好的动态数组进行初始化</li><li>void add(struct DynamicArray* Address,int E)：在动态数组末尾添加一个元素</li><li>void Out(struct DynamicArray* Array)：用来输出动态数组各项信息的方法*</li><li>void AddMiddle(struct DynamicArray* Address,unsigned int SubScript,unsigned int E)：封装一个用来在数组中间插入元素的方法，这里的 SubScript下标从0开始</li><li>void IncreaseSpace(struct DynamicArray* Address)：对动态数组进行扩容</li><li>void Delete(struct DynamicArray* Address)：删除数组末尾的元素</li><li>void DeleteAll(struct DynamicArray* Address)：删除数组所有的元素</li><li>void DeleteMiddle(struct DynamicArray* Address,unsigned int j)：删除数组中第j个元素，所以j从1开始</li><li>bool Empty(struct DynamicArray* Address);//判断动态数组是否为空 </li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicArray</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> * P;<span class="comment">//数组的头指针</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Container;<span class="comment">//数组的容量</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> I;<span class="comment">//数组已经存储元素的数量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(struct DynamicArray* Address)</span></span>; <span class="comment">//定义一个初始化函数，对创建好的动态数组进行初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(struct DynamicArray* Address,<span class="keyword">int</span> E)</span></span>;<span class="comment">//在动态数组末尾添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(struct DynamicArray *Array)</span></span>; <span class="comment">//封装一个专门用来输出动态数组各项信息的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddMiddle</span><span class="params">(struct DynamicArray* Address,<span class="keyword">unsigned</span> <span class="keyword">int</span> SubScript,<span class="keyword">unsigned</span> <span class="keyword">int</span> E)</span></span>;<span class="comment">//封装一个用来在数组中间插入元素的方法，这里的 SubScript下标从0开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSpace</span><span class="params">(struct DynamicArray* Address)</span></span>;<span class="comment">//对动态数组进行扩容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(struct DynamicArray* Address)</span></span>;<span class="comment">//删除数组末尾的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteAll</span><span class="params">(struct DynamicArray* Address)</span></span>;<span class="comment">//删除数组所有的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteMiddle</span><span class="params">(struct DynamicArray* Address,<span class="keyword">unsigned</span> <span class="keyword">int</span> j)</span></span>;<span class="comment">//删除数组中第j个元素，所以j从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(struct DynamicArray* Address)</span></span>;<span class="comment">//判断动态数组是否为空 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicArray</span> <span class="title">DynamicArrayOne</span>;</span></span><br><span class="line"></span><br><span class="line">init(&amp;DynamicArrayOne);<span class="comment">//调用动态数组的初始化方法对创建好的数组进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素测试   结束</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">add(&amp;DynamicArrayOne,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加元素测试   结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在动态数组中间添加元素 开始</span></span><br><span class="line"><span class="comment">//AddMiddle(&amp;DynamicArrayOne,2,2323);//正常的在动态数组中间插入元素</span></span><br><span class="line"><span class="comment">//AddMiddle(&amp;DynamicArrayOne,0,77);//测试下标大于动态数组已经存储元素个数</span></span><br><span class="line"><span class="comment">// 在动态数组中间添加元素 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除末尾元素 开始</span></span><br><span class="line"><span class="comment">//Delete(&amp;DynamicArrayOne);</span></span><br><span class="line"><span class="comment">//删除末尾元素 结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除中间元素 开始</span></span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">2</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">1</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">2</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">1</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">2</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">1</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">2</span>);</span><br><span class="line">DeleteMiddle(&amp;DynamicArrayOne,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//删除中间元素 结束</span></span><br><span class="line"><span class="comment">//判断动态数组是否为空 开始 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;动态数组是否为空--------------&gt;%d\n&quot;</span>,Empty(&amp;DynamicArrayOne)); <span class="comment">//输出1就是不为空，0就是为空 </span></span><br><span class="line"><span class="comment">//判断动态数组是否为空 结束 </span></span><br><span class="line"><span class="comment">//输出  开始</span></span><br><span class="line">Out(&amp;DynamicArrayOne);</span><br><span class="line"><span class="comment">//输出  结束</span></span><br><span class="line"><span class="built_in">free</span>((&amp;DynamicArrayOne)-&gt;P);<span class="comment">//使用完毕之后将申请的空间手动释放</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(struct DynamicArray* Address)</span> </span>&#123; <span class="comment">//定义一个初始化函数，对创建好的动态数组进行初始化</span></span><br><span class="line"><span class="keyword">if</span>(Address==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line">Address-&gt;Container=<span class="number">5</span>;<span class="comment">//数组中初始容量是5</span></span><br><span class="line">Address-&gt;I=<span class="number">0</span>;<span class="comment">//初始化时数组中没有任何的元素，默认是0</span></span><br><span class="line">Address-&gt;P=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(Address-&gt;Container*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//根据数组的容量动态的申请空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(struct DynamicArray* Address,<span class="keyword">int</span> E)</span> </span>&#123;</span><br><span class="line">IncreaseSpace(Address);</span><br><span class="line">(Address-&gt;P)[Address-&gt;I]=E;<span class="comment">//将需要添加的数组添加到动态数组中 ，这里的存储容量有两个作用，不仅可以记录数组中已经存储了多少个元素，还可以用来记录下一个数组元素的下标</span></span><br><span class="line">Address-&gt;I++;<span class="comment">//存储容量加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(struct DynamicArray *Array)</span> </span>&#123; <span class="comment">//封装一个专门用来输出动态数组各项信息的方法</span></span><br><span class="line"><span class="keyword">if</span>(Array==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;动态数组的容量是%d\n&quot;</span>,Array-&gt;Container);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;动态数组中存储了%d个元素\n&quot;</span>,Array-&gt;I);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;Array-&gt;I; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是第%d个元素，它的值是%d\n&quot;</span>,i+<span class="number">1</span>,(Array-&gt;P)[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddMiddle</span><span class="params">(struct DynamicArray* Address,<span class="keyword">unsigned</span> <span class="keyword">int</span> SubScript,<span class="keyword">unsigned</span> <span class="keyword">int</span> E)</span> </span>&#123;<span class="comment">//封装一个用来在数组中间插入元素的方法，这里的 SubScript下标从0开始</span></span><br><span class="line"><span class="keyword">if</span>(Address==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line">IncreaseSpace(Address);</span><br><span class="line"><span class="comment">//当下标大于动态数组中存储元素的个数时，将需要添加到动态数组的末尾</span></span><br><span class="line"><span class="keyword">if</span>(SubScript&gt;Address-&gt;I) &#123; <span class="comment">//一旦触发这个条件判断，下面的for循环就不会执行</span></span><br><span class="line">SubScript=Address-&gt;I;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=Address-&gt;I; i&gt;SubScript; i--) &#123;</span><br><span class="line">(Address-&gt;P)[i]=(Address-&gt;P)[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">(Address-&gt;P)[SubScript]=E;</span><br><span class="line">Address-&gt;I++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSpace</span><span class="params">(struct DynamicArray* Address)</span> </span>&#123; <span class="comment">//对动态数组进行扩容</span></span><br><span class="line"><span class="keyword">if</span>(Address==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Address-&gt;Container==Address-&gt;I) &#123; <span class="comment">//判断存储容量和动态数组的容量是否相等 ，相等的话就要进行扩容</span></span><br><span class="line">Address-&gt;Container+=<span class="number">10</span>;<span class="comment">// 动态数组的容量在原有的基础上增加10个</span></span><br><span class="line"><span class="keyword">int</span>* PTem=<span class="built_in">malloc</span>(Address-&gt;Container*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//根据数组的容量动态的申请新的空间</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Address-&gt;I; i++) &#123;</span><br><span class="line">PTem[i]=(Address-&gt;P)[i];<span class="comment">//将原来的动态数组的内容依次的拷贝到新申请的空间中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(Address-&gt;P);<span class="comment">//释放原来的申请存放数据的空间</span></span><br><span class="line">Address-&gt;P=PTem;<span class="comment">//将动态数组中的头指针指向到新的空间上</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(struct DynamicArray* Address)</span> </span>&#123; <span class="comment">//删除数组末尾的元素</span></span><br><span class="line"><span class="keyword">if</span>(Address==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Address-&gt;I&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数组已经空了\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line">Address-&gt;I--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteAll</span><span class="params">(struct DynamicArray* Address)</span> </span>&#123; <span class="comment">//删除数组所有的元素</span></span><br><span class="line"><span class="keyword">if</span>(Address==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line">Address-&gt;I=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteMiddle</span><span class="params">(struct DynamicArray* Address,<span class="keyword">unsigned</span> <span class="keyword">int</span> j)</span> </span>&#123; <span class="comment">//删除数组中第j个元素，所以j从1开始</span></span><br><span class="line"><span class="keyword">if</span>(Address==<span class="literal">NULL</span>) &#123; <span class="comment">//判断传递的指针是否为空 ，提高程序的容错率</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;参数错误！！！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Address-&gt;I&lt;j) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;有这个位置吗？？？？？？？\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=j<span class="number">-1</span>; i&lt;Address-&gt;I<span class="number">-1</span>; i++) &#123;</span><br><span class="line">(Address-&gt;P)[i]=(Address-&gt;P)[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">Address-&gt;I--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(struct DynamicArray* Address)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Address-&gt;P&gt;<span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h3><p>当我们定义了文章开头的结构的时候，我们就是将这个结构体作为动态数组在使用</p><h4 id="扩容机制实现"><a href="#扩容机制实现" class="headerlink" title="扩容机制实现"></a>扩容机制实现</h4><p>当结构体中Container和I变量两个值相等的时候，那么当前结构体中p指针指向的数组就存储满了，那么就会调用malloc方法申请一块新的内存空间（每一个扩容都是在原来的容量上加10），并且使用for循环将原来p指针指向的数组中的数据拷贝到新的数组中，同时修改p指针的指向并且释放原来p指针指向的地址的内存空间</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p>调用addMiddle方法在中间插入元素：for循环向后移动元素是i&gt;SubScript而不是i&gt;=SubScript</p><p>i&gt;SubScript和i&gt;=SubScript这两个都能使程序不发生逻辑，只是后者最后一次移动是将下标为SubScript-1的元素移动到下标为SubScript的元素的位置，这个时候会退出当前的for循环，在for循环之后紧跟了一个(Address-&gt;P)[SubScript]=E;这个操作又会将原来下标为SubScript的元素的值进行覆盖，从而不影响结果。i&gt;SubScript只是少了最后一次的挪动，SubScript下标代表的元素值在没有执行到(Address-&gt;P)[SubScript]=E;这个操作时是不会发生改变的！！</p></li><li><p>调用DeleteMiddle方法在中间删除元素：for循环中是 i &lt; Address-&gt;I-1</p><p>Address-&gt;代表的是动态数组最后一个元素的下一个元素的下标，循环体中(Address-&gt;P)[i]=(Address-&gt;P)[i+1];的i+1是数组的下标，如果判断条件中 i 不是 i &lt; Address-&gt;I-1而是 i &lt; Address-&gt;I就会发生数组的下标越界问题</p></li></ul><h3 id="动态数组的优缺点"><a href="#动态数组的优缺点" class="headerlink" title="动态数组的优缺点"></a>动态数组的优缺点</h3><ul><li><p>优点</p><ul><li>能够动态的扩容，不存在把动态数组存储满了这一说法</li><li>依赖c语言中静态数组实现，在读写数据的时候根据下标进行查询，读写速度快</li></ul></li><li><p>缺点</p><ul><li>由于采用静态数组进行数据存储，当删除中间的元素的时候，会发生重新申请空间或者for循环移动数组次数太多的问，对于删除操作来说很慢</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态数组&quot;&gt;&lt;a href=&quot;#动态数组&quot; class=&quot;headerlink&quot; title=&quot;动态数组&quot;&gt;&lt;/a&gt;动态数组&lt;/h1&gt;&lt;p&gt;在c语言中我们都听过数组，创建一个数组也很简单，例如我们创建一个简单的数组&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="数据结构" scheme="https://i-fire.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://i-fire.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="动态数组" scheme="https://i-fire.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构简介</title>
    <link href="https://i-fire.top/post/datastructure.html"/>
    <id>https://i-fire.top/post/datastructure.html</id>
    <published>2020-11-14T11:03:08.000Z</published>
    <updated>2020-11-15T09:03:38.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84/9663235">逻辑结构</a>和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构</p><p>数据的逻辑结构和物理结构是数据结构的两个密切相关的方面，同一逻辑结构可以对应不同的存储结构。算法的设计取决于数据的逻辑结构，而算法的实现依赖于指定的<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/350782">存储结构</a></p><p>数据结构的研究内容是构造复杂软件系统的基础，它的核心技术是分解与抽象。通过分解可以划分出数据的3个层次；再通过抽象，舍弃数据元素的具体内容，就得到逻辑结构。类似地，通过分解将处理要求划分成各种功能，再通过抽象舍弃实现细节，就得到运算的定义。上述两个方面的结合可以将问题变换为数据结构。这是一个从具体（即具体问题）到抽象（即数据结构）的过程。然后，通过增加对实现细节的考虑进一步得到存储结构和实现运算，从而完成设计任务。这是一个从抽象（即数据结构）到具体（即具体实现）的过程</p><h2 id="研究对象"><a href="#研究对象" class="headerlink" title="研究对象"></a>研究对象</h2><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>指反映数据<a href="https://baike.baidu.com/item/%E5%85%83%E7%B4%A0">元素</a>之间的逻辑关系的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a>，其中的<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB">逻辑关系</a>是指数据元素之间的前后间关系，而与他们在计算机中的存储位置无关。逻辑结构包括</p><p>1.集合：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系</p><p>2.线性结构：数据结构中的元素存在一对一的相互关系</p><p>3.<a href="https://baike.baidu.com/item/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84">树形结构</a>：数据结构中的元素存在一对多的相互关系</p><p>4.<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84">图形结构</a>：数据结构中的元素存在多对多的相互关系</p><h3 id="数据的物理结构"><a href="#数据的物理结构" class="headerlink" title="数据的物理结构"></a>数据的物理结构</h3><p>指数据的<a href="https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84">逻辑结构</a>在计算机存储空间的存放形式</p><p>数据的物理结构是数据结构在计算机中的表示（又称映像），它包括数据元素的机内表示和关系的机内表示。由于具体实现的方法有顺序、链接、索引、散列等多种，所以，一种数据结构可表示成一种或多种存储结构</p><p>数据元素的机内表示（映像方法）： 用二进制位（bit）的位串表示数据元素。通常称这种位串为节点（node）。当数据元素有若干个数据项组成时，位串中与各个数据项对应的子位串称为数据域（data field）。因此，节点是数据元素的机内表示（或机内映像）</p><p>关系的机内表示（映像方法）：数据元素之间的关系的机内表示可以分为顺序映像和非顺序映像，常用两种存储结构：顺序存储结构和链式存储结构。顺序映像借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系。非顺序映像借助指示元素存储位置的指针（pointer）来表示数据元素之间的逻辑关系</p><h3 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h3><p>数据的逻辑结构在计算机存储空间中的存放形式称为数据的物理结构(也称为存储结构)。一般来说，一种数据结构的逻辑结构根据需要可以表示成多种存储结构，常用的存储结构有顺序存储、链式存储、索引存储和哈希存储等</p><p>数据的顺序存储结构的特点是：借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系；非顺序存储的特点是：借助指示元素存储地址的指针表示数据元素之间的逻辑关系</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>数据结构有很多种，一般来说，按照数据的逻辑结构对其进行简单的分类，包括线性结构和非线性结构两类</p><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><p>简单地说，线性结构就是表中各个结点具有线性关系。如果从数据结构的语言来描述，线性结构应该包括如下几点：</p><p>1、线性结构是非空集</p><p>2、线性结构有且仅有一个开始结点和一个终端结点</p><p>3、线性结构所有结点都最多只有一个直接前趋结点和一个直接后继结点</p><p>线性表就是典型的线性结构，还有栈、队列和串等都属于线性结构</p><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><p>简单地说，非线性结构就是表中各个结点之间具有多个对应关系。如果从数据结构的语言来描述，非线性结构应该包括如下几点：</p><p>1、非线性结构是非空集</p><p>2、非线性结构的一个结点可能有多个直接前趋结点和多个直接后继结点</p><p>在实际应用中，数组、广义表、树结构和图结构等数据结构都属于非线性结构</p><h2 id="常用的数据结构"><a href="#常用的数据结构" class="headerlink" title="常用的数据结构"></a>常用的数据结构</h2><p>在<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132">计算机科学</a>的发展过程中，数据结构也随之发展。程序设计中常用的数据结构包括如下几个</p><h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h3><p><a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/3794097">数组</a>是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。数组可以说是最基本的数据结构，在各种编程语言中都有对应。一个数组可以分解为多个数组元素，按照数据元素的类型，数组可以分为整型数组、字符型数组、浮点型数组、指针数组和结构数组等。数组还可以有一维、二维以及多维等表现形式</p><h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈( Stack)"></a>栈( Stack)</h3><p><a href="https://baike.baidu.com/item/%E6%A0%88/12808149">栈</a>是一种特殊的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8/3228081">线性表</a>，它只能在一个表的一个固定端进行数据结点的插入和删除操作。栈按照后进先出的原则来存储数据，也就是说，先插入的数据将被压入栈底，最后插入的数据在栈顶，读出数据时，从栈顶开始逐个读出。栈在汇编语言程序中，经常用于重要数据的现场保护。栈中没有数据时，称为空栈</p><h3 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h3><p><a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481">队列</a>和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。一般来说，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。队列中没有元素时，称为空队列</p><h3 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表( Linked List)"></a>链表( Linked List)</h3><p><a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8/9794473">链表</a>是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。链表由一系列数据结点构成，每个数据结点包括数据域和指针域两部分。其中，指针域保存了数据结构中下一个元素存放的地址。链表结构中数据元素的逻辑顺序是通过链表中的指针链接次序来实现的</p><h3 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树( Tree)"></a>树( Tree)</h3><p><a href="https://baike.baidu.com/item/%E6%A0%91/2699484">树</a>是典型的非线性结构，它是包括，2个结点的有穷集合K。在树结构中，有且仅有一个根结点，该结点没有前驱结点。在树结构中的其他结点都有且仅有一个前驱结点，而且可以有两个后继结点，m≥0</p><h3 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图(Graph)"></a>图(Graph)</h3><p><a href="https://baike.baidu.com/item/%E5%9B%BE/13018767">图</a>是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。如果两个顶点之间存在一条边，那么就表示这两个顶点具有相邻关系</p><h3 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆(Heap)"></a>堆(Heap)</h3><p><a href="https://baike.baidu.com/item/%E5%A0%86/20606834">堆</a>是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。堆的特点是根结点的值是所有结点中最小的或者最大的，并且根结点的两个子树也是一个堆结构</p><h3 id="散列表-Hash"><a href="#散列表-Hash" class="headerlink" title="散列表(Hash)"></a>散列表(Hash)</h3><p>散列表源自于<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/2366288">散列函数</a>(Hash function)，其思想是如果在结构中存在关键字和T相等的记录，那么必定在F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录</p><hr><p><strong>注：以上内容来自<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450?fr=kg_qa">百度百科</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的&lt;a href=&quot;https://baike.bai</summary>
      
    
    
    
    <category term="数据结构" scheme="https://i-fire.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://i-fire.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>博客成立啦</title>
    <link href="https://i-fire.top/post/blogcreate.html"/>
    <id>https://i-fire.top/post/blogcreate.html</id>
    <published>2020-11-14T02:21:16.000Z</published>
    <updated>2020-11-15T09:00:04.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客成立啦"><a href="#博客成立啦" class="headerlink" title="博客成立啦"></a>博客成立啦</h1><p>当你看到这个页面，说明博客创建成功</p>]]></content>
    
    
    <summary type="html">博客成立</summary>
    
    
    
    <category term="大事记录" scheme="https://i-fire.top/categories/%E5%A4%A7%E4%BA%8B%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活" scheme="https://i-fire.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
